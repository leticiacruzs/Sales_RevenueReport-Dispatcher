<Activity mc:Ignorable="sap sap2010" x:Class="LeituraSalesList" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_ExpectedColumns" Type="InArgument(s:String[])" />
    <x:Property Name="in_FilePdf" Type="InArgument(x:String)" />
    <x:Property Name="out_DtSalesPdf" Type="OutArgument(sd:DataTable)" />
    <x:Property Name="out_DtReport" Type="OutArgument(sd:DataTable)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>LeituraSalesList_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>UiPath.PDF.Activities</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>System.Numerics</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.PDF.Activities</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Reflection.MetadataLoadContext</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>NPOI.Core</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.CodeDom</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Forms</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Core</AssemblyReference>
      <AssemblyReference>System.Text.RegularExpressions</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>System.Runtime.Numerics</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="LeituraSalesList" sap:VirtualizedContainerService.HintSize="759,1729" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="textPdf" />
      <Variable x:TypeArguments="x:String" Name="normalizedColumnText" />
      <Variable x:TypeArguments="x:String" Name="normalizedNewlineText" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message - Read Table From Pdf" sap:VirtualizedContainerService.HintSize="434,173" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[String.Format(&quot;Starting the extraction of the table from the PDF: {0}&quot;, in_FilePdf)]" />
    <ui:ReadPDFText DisplayName="Read PDF Text" FileName="[in_filePdf]" sap:VirtualizedContainerService.HintSize="434,114" sap2010:WorkflowViewState.IdRef="ReadPDFText_1" PreserveFormatting="True" Range="All" Text="[textPdf]" />
    <Assign DisplayName="Assign Normalized Column Text" sap:VirtualizedContainerService.HintSize="434,114" sap2010:WorkflowViewState.IdRef="Assign_3">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[normalizedColumnText]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[System.Text.RegularExpressions.Regex.Replace(textPdf.Trim, " {5,}", ";")]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Assign Normalized NewLine Text" sap:VirtualizedContainerService.HintSize="434,114" sap2010:WorkflowViewState.IdRef="Assign_4">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[normalizedNewlineText]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[System.Text.RegularExpressions.Regex.Replace(normalizedColumnText, "(\r\n|\n|\r)[ ]{2,}", Environment.NewLine)]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:GenerateDataTable ColumnSizes="{x:Null}" NewLineSeparator="{x:Null}" Positions="{x:Null}" AutoDetectTypes="False" CSVParsing="False" ColumnSeparators=";" DataTable="[out_DtSalesPdf]" DisplayName="Generate Data Table From Text" sap:VirtualizedContainerService.HintSize="434,233" sap2010:WorkflowViewState.IdRef="GenerateDataTable_2" Input="[normalizedNewlineText]" UseColumnHeader="True" />
    <If Condition="[Not(in_expectedColumns.All(Function(col) out_DtSalesPdf.Columns.Contains(col)))]" DisplayName="If Has Invalid Table Schema" sap:VirtualizedContainerService.HintSize="434,400" sap2010:WorkflowViewState.IdRef="If_1">
      <If.Then>
        <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="416,173" sap2010:WorkflowViewState.IdRef="Sequence_3">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Throw DisplayName="Throw AE - Missing Columns" Exception="[New ApplicationException(&quot;Falha na validação da tabela do PDF: colunas obrigatórias não foram encontradas. Verifique se o modelo do PDF está correto.&quot;)]" sap:VirtualizedContainerService.HintSize="382,113" sap2010:WorkflowViewState.IdRef="Throw_1" />
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="416,89" sap2010:WorkflowViewState.IdRef="Sequence_4">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Sequence>
      </If.Else>
    </If>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="' Clonar a estrutura da tabela original (sem dados)&#xA;out_DtReport = in_DtSalesPdf.Clone()&#xA;&#xA;' Adicionar as 7 colunas extras&#xA;out_DtReport.Columns.Add(&quot;Valor Unitário (BRL)&quot;, GetType(String))&#xA;out_DtReport.Columns.Add(&quot;Valor Total (BRL)&quot;, GetType(String))&#xA;out_DtReport.Columns.Add(&quot;Data/Hora Conversão do Câmbio&quot;, GetType(String))&#xA;out_DtReport.Columns.Add(&quot;Endereço&quot;, GetType(String))&#xA;out_DtReport.Columns.Add(&quot;Bairro&quot;, GetType(String))&#xA;out_DtReport.Columns.Add(&quot;Localidade/UF&quot;, GetType(String))&#xA;out_DtReport.Columns.Add(&quot;Erros Encontrados&quot;, GetType(String))" DisplayName="Invoke Code DtReport" sap:VirtualizedContainerService.HintSize="434,197" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
      <ui:InvokeCode.Arguments>
        <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_DtReport">[out_DtReport]</OutArgument>
        <InArgument x:TypeArguments="sd:DataTable" x:Key="in_DtSalesPdf">[out_DtSalesPdf]</InArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="' 1. Adiciona a coluna &quot;LAST LINE VENDOR&quot; tipo Boolean (se ainda não existir)&#xD;&#xA;If Not io_DtSalesPdf.Columns.Contains(&quot;LAST LINE VENDOR&quot;) Then&#xD;&#xA;    io_DtSalesPdf.Columns.Add(&quot;LAST LINE VENDOR&quot;, GetType(Boolean))&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;' 2. Inicializa todas como False&#xD;&#xA;For Each row As DataRow In io_DtSalesPdf.Rows&#xD;&#xA;    row(&quot;LAST LINE VENDOR&quot;) = False&#xD;&#xA;Next&#xD;&#xA;&#xD;&#xA;' 3. Marca a última linha de cada vendedor como True&#xD;&#xA;Dim grouped = io_DtSalesPdf.AsEnumerable() _&#xD;&#xA;                .GroupBy(Function(r) r.Field(Of String)(&quot;Vendor ID&quot;))&#xD;&#xA;&#xD;&#xA;For Each Group In grouped&#xD;&#xA;    Dim lastRow = Group.Last()&#xD;&#xA;    lastRow(&quot;LAST LINE VENDOR&quot;) = True&#xD;&#xA;Next&#xD;&#xA;" DisplayName="Invoke Code LastLine io_DtSalesPdf" sap:VirtualizedContainerService.HintSize="434,197" sap2010:WorkflowViewState.IdRef="InvokeCode_2">
      <ui:InvokeCode.Arguments>
        <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_DtSalesPdf">[out_DtSalesPdf]</InOutArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <ui:LogMessage DisplayName="Log Message - Extracted Sales Count" sap:VirtualizedContainerService.HintSize="434,164" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Info" Message="[String.Format(&quot;Total number of sales rows extracted for processing: {0}.&quot;, out_DtSalesPdf.Rows.Count)]" />
  </Sequence>
</Activity>